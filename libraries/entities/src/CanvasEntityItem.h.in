//
//  Created by Ada <ada@thingvellir.net> on 2025-02-04
//  Copyright 2025 Overte e.V.
//
//  Distributed under the Apache license, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html

#ifndef hifi_CanvasEntityItem_h
#define hifi_CanvasEntityItem_h

#include "EntityItem.h"
#include <gpu/Texture.h>
#include <CanvasCommand.h>

class CanvasEntityItem : public EntityItem {
public:
    static EntityItemPointer factory(const EntityItemID& entityID, const EntityItemProperties& properties);

    CanvasEntityItem(const EntityItemID& entityItemID);
    ~CanvasEntityItem();

    virtual ShapeType getShapeType() const override { return SHAPE_TYPE_BOX; }

    ALLOW_INSTANTIATION // This class can be instantiated
    ENTITY_PROPERTY_SUBCLASS_METHODS

    QByteArray& getImageData() { return _imageData; }
    void setImageData(const CanvasImage& image);

    void pushCommands(const QVector<CanvasCommand>& queue) { _commandQueue.append(queue); }

    void commit();

    gpu::TexturePointer getTexture() const { return _texture; }

protected:
@Canvas_ENTITY_PROPS@

    int expectedSize() const;
    void updateBufferSize();
    void paintCommands(const QVector<CanvasCommand>& queue);

    QByteArray _imageData;
    QVector<CanvasCommand> _commandQueue;
    gpu::TexturePointer _texture { nullptr };
};

#endif // hifi_CanvasEntityItem_h
