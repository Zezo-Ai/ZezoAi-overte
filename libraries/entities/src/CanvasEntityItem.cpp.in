//
//  Created by Ada <ada@thingvellir.net> on 2025-02-04
//  Copyright 2025 Overte e.V.
//
//  Distributed under the Apache license, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html

#include "CanvasEntityItem.h"

#include <QtCore/QDebug>
#include <QImage>
#include <QPainter>

#include "EntitiesLogging.h"
#include "EntityItemProperties.h"
#include "EntityTreeElement.h"

EntityItemPointer CanvasEntityItem::factory(const EntityItemID& entityID, const EntityItemProperties& properties) {
    std::shared_ptr<CanvasEntityItem> entity(new CanvasEntityItem(entityID), [](CanvasEntityItem* ptr) { ptr->deleteLater(); });
    entity->setProperties(properties);
    size_t size = 4 * static_cast<size_t>(properties._width) * static_cast<size_t>(properties._height);
    entity->_imageData = QByteArray(size, 0);
    return entity;
}

CanvasEntityItem::CanvasEntityItem(const EntityItemID& entityItemID) : EntityItem(entityItemID) {
    _type = EntityTypes::Canvas;
}

CanvasEntityItem::~CanvasEntityItem() {}

void CanvasEntityItem::debugDump() const {
    qCDebug(entities) << "CanvasEntityItem id:" << getEntityItemID() << "---------------------------------------------";
    qCDebug(entities) << "    name:" << _name;
    qCDebug(entities) << "    position:" << debugTreeVector(getWorldPosition());
    qCDebug(entities) << "    dimensions:" << debugTreeVector(getScaledDimensions());
    qCDebug(entities) << "    editedAgo:" << debugTime(getLastEdited(), usecTimestampNow());
    qCDebug(entities) << "    pointer:" << this;

@Base_ENTITY_DEBUG@

}

void CanvasEntityItem::appendSubclassData(OctreePacketData* packetData, EncodeBitstreamParams& params,
                                          EntityTreeElementExtraEncodeDataPointer entityTreeElementExtraEncodeData,
                                          EntityPropertyFlags& requestedProperties,
                                          EntityPropertyFlags& propertyFlags,
                                          EntityPropertyFlags& propertiesDidntFit,
                                          int& propertyCount,
                                          OctreeElement::AppendState& appendState) const {

    bool successPropertyFits = true;

@Canvas_ENTITY_APPEND@

}

int CanvasEntityItem::readEntitySubclassDataFromBuffer(const unsigned char* data, int bytesLeftToRead,
                                                       ReadBitstreamToTreeParams& args,
                                                       EntityPropertyFlags& propertyFlags, bool overwriteLocalData,
                                                       bool& somethingChanged) {
    int bytesRead = 0;
    const unsigned char* dataAt = data;

@Canvas_ENTITY_READ@

    return bytesRead;
}

EntityPropertyFlags CanvasEntityItem::getEntityProperties(EncodeBitstreamParams& params) const {
    EntityPropertyFlags requestedProperties = EntityItem::getEntityProperties(params);

@Canvas_REQUESTED_PROPS@

    return requestedProperties;
}

bool CanvasEntityItem::setSubClassProperties(const EntityItemProperties& properties) {
    bool somethingChanged = false;
    uint16_t oldWidth = getWidth();
    uint16_t oldHeight = getHeight();

@Canvas_ENTITY_SET_FROM@

    // reallocate and resize if the size properties are changed
    if (oldWidth != getWidth() || oldHeight != getHeight()) {
        size_t size = 4 * static_cast<size_t>(_width) * static_cast<size_t>(_height);
        _imageData = QByteArray(size, 0);
    }

    return somethingChanged;
}

EntityItemProperties CanvasEntityItem::getProperties(const EntityPropertyFlags& desiredProperties, bool allowEmptyDesiredProperties) const {
    EntityItemProperties properties = EntityItem::getProperties(desiredProperties, allowEmptyDesiredProperties); // get the properties from our base class

@Canvas_ENTITY_COPY_TO@

    return properties;
}

void CanvasEntityItem::setImageData(const CanvasImage& image) {
    if (image.buffer.length() != _imageData.length()) {
        return;
    }

    std::memcpy(_imageData.data(), image.buffer.constData(), _imageData.length());
}

void CanvasEntityItem::paintCommands(const QVector<CanvasCommand>& queue) {
    using V = CanvasCommand::Variant;
    using Hint = CanvasCommand::RenderHint;

    auto destImage = QImage(reinterpret_cast<uint8_t *>(_imageData.data()), _width, _height, QImage::Format_RGBA8888);
    QPen pen;
    QBrush brush;
    QPainter p;
    p.begin(&destImage);

    for (int i = 0; i < queue.length(); i++) {
        auto cmd = queue[i];

        switch (cmd.kind()) {
            case V::Invalid:
                qCCritical(entities) << "CanvasEntityItem::paintCommands: Invalid command at index " << i;
                break;

            case V::SetStrokeWidth: {
                auto props = cmd._setStrokeWidth;
                pen.setWidthF(props.width);
                p.setPen(pen);
                break;
            }

            case V::SetColor: {
                auto props = cmd._setColor;
                auto color = QColor(props.color[0], props.color[1], props.color[2], 255);
                pen.setColor(color);
                brush.setColor(color);
                p.setPen(pen);
                p.setBrush(brush);
                break;
            }

            case V::SetHints: {
                auto props = cmd._setHints;
                p.setRenderHint(QPainter::Antialiasing, (props.hints & Hint::PrimitiveAntialiasing) != 0);
                p.setRenderHint(QPainter::TextAntialiasing, (props.hints & Hint::TextAntialiasing) != 0);
                p.setRenderHint(QPainter::SmoothPixmapTransform, (props.hints & Hint::BilinearImageScaling) != 0);
                break;
            }

            case V::SetBlendMode: {
                auto props = cmd._setBlendMode;
                p.setCompositionMode(props.mode);
                break;
            }

            case V::SetFont: {
                auto props = cmd._setFont;
                p.setFont(QFont(props.family, props.size, props.weight, props.italic));
                break;
            }

            case V::ClearRect: {
                auto props = cmd._clearRect;
                p.eraseRect(props.rect);
                break;
            }

            case V::FillPath: {
                auto props = cmd._fillPath;
                p.fillPath(props.path, brush);
                break;
            }

            case V::FillRect: {
                auto props = cmd._fillRect;
                p.fillRect(props.rect, brush);
                break;
            }

            case V::FillEllipse: {
                auto props = cmd._fillEllipse;
                auto pathHack = QPainterPath();
                pathHack.addEllipse(props.rect);
                p.fillPath(pathHack, brush);
                break;
            }

            case V::FillText: {
                auto props = cmd._fillText;

                // unbounded text
                if (props.rect.width() == 0.0 && props.rect.height() == 0.0) {
                    p.drawText(QPointF(props.rect.x(), props.rect.y()), props.text);
                } else {
                    p.drawText(props.rect, props.flag, props.text);
                }
                break;
            }

            case V::StrokePath: {
                auto props = cmd._strokePath;
                p.strokePath(props.path, pen);
                break;
            }

            case V::StrokeRect: {
                auto props = cmd._strokeRect;
                p.drawRect(props.rect);
                break;
            }

            case V::StrokeArc: {
                auto props = cmd._strokeArc;
                p.drawArc(props.rect, props.startAngle * 16, props.spanAngle * 16);
                break;
            }

            case V::StrokeEllipse: {
                auto props = cmd._strokeEllipse;
                p.drawEllipse(props.rect);
                break;
            }

            case V::Point: {
                auto props = cmd._point;
                p.drawPoint(props.point);
                break;
            }

            case V::Line: {
                auto props = cmd._line;
                p.drawLine(props.line);
                break;
            }

            case V::ImageCopy: {
                auto props = cmd._imageCopy;
                if (props.image.buffer.length() != static_cast<int>(4 * props.image.width * props.image.height)) {
                    qCCritical(entities) << "CanvasEntityItem::paintCommands: Source CanvasImage buffer has incorrect size, expected " << (4 * props.image.width * props.image.height) << ", got " << props.image.buffer.length();
                    break;
                }
                auto img = QImage(reinterpret_cast<const uint8_t*>(props.image.buffer.constData()), props.image.width, props.image.height, QImage::Format_RGBA8888);
                p.drawImage(props.dst, img, props.src);
                break;
            }
        }
    }

    p.end();
}

void CanvasEntityItem::commit() {
    if (_commandQueue.length() > 0) {
        paintCommands(_commandQueue);
        _commandQueue.clear();
    }

    auto texture = gpu::Texture::createStrict(gpu::Element::COLOR_SRGBA_32, _width, _height);
    texture->setStoredMipFormat(gpu::Element::COLOR_SRGBA_32);
    texture->setAutoGenerateMips(false);
    texture->assignStoredMip(0, _imageData.length(), reinterpret_cast<const uint8_t*>(_imageData.constData()));
    texture->setSource("CanvasEntityRenderer");
    _texture = texture;

    setNeedsRenderUpdate(true);
    somethingChangedNotification();
}
